{"version":3,"sources":["webpack:///./node_modules/hammerjs/hammer.js"],"names":["__WEBPACK_AMD_DEFINE_RESULT__","window","document","exportName","undefined","assign","VENDOR_PREFIXES","TEST_ELEMENT","createElement","TYPE_FUNCTION","round","Math","abs","now","Date","setTimeoutContext","fn","timeout","context","setTimeout","bindFn","invokeArrayArg","arg","Array","isArray","each","obj","iterator","i","forEach","length","call","hasOwnProperty","deprecate","method","name","message","deprecationMessage","e","Error","stack","replace","log","console","warn","apply","this","arguments","Object","target","TypeError","output","index","source","nextKey","extend","dest","src","merge","keys","inherit","child","base","properties","childP","baseP","prototype","create","constructor","_super","boolOrFn","val","args","ifUndefined","val1","val2","addEventListeners","types","handler","splitStr","type","addEventListener","removeEventListeners","removeEventListener","hasParent","node","parent","parentNode","inStr","str","find","indexOf","trim","split","inArray","findByKey","toArray","slice","uniqueArray","key","sort","results","values","push","a","b","prefixed","property","prefix","prop","camelProp","toUpperCase","_uniqueId","getWindowForElement","element","doc","ownerDocument","defaultView","parentWindow","SUPPORT_TOUCH","SUPPORT_POINTER_EVENTS","SUPPORT_ONLY_TOUCH","test","navigator","userAgent","COMPUTE_INTERVAL","INPUT_START","INPUT_MOVE","INPUT_END","INPUT_CANCEL","DIRECTION_NONE","DIRECTION_LEFT","DIRECTION_RIGHT","DIRECTION_UP","DIRECTION_DOWN","DIRECTION_HORIZONTAL","DIRECTION_VERTICAL","DIRECTION_ALL","PROPS_XY","PROPS_CLIENT_XY","Input","manager","callback","self","options","inputTarget","domHandler","ev","enable","init","inputHandler","eventType","input","pointersLen","pointers","changedPointersLen","changedPointers","isFirst","isFinal","session","pointersLength","firstInput","simpleCloneInputData","firstMultiple","offsetCenter","center","getCenter","timeStamp","deltaTime","angle","getAngle","distance","getDistance","offset","offsetDelta","prevDelta","prevInput","x","deltaX","y","deltaY","computeDeltaXY","offsetDirection","getDirection","overallVelocity","getVelocity","overallVelocityX","overallVelocityY","scale","start","end","rotation","getRotation","maxPointers","velocity","velocityX","velocityY","direction","last","lastInterval","v","computeIntervalInputData","srcEvent","computeInputData","emit","recognize","clientX","clientY","p1","p2","props","sqrt","atan2","PI","evEl","evTarget","evWin","destroy","MOUSE_INPUT_MAP","mousedown","mousemove","mouseup","MOUSE_ELEMENT_EVENTS","MOUSE_WINDOW_EVENTS","MouseInput","pressed","button","which","pointerType","POINTER_INPUT_MAP","pointerdown","pointermove","pointerup","pointercancel","pointerout","IE10_POINTER_TYPE_ENUM","2","3","4","5","POINTER_ELEMENT_EVENTS","POINTER_WINDOW_EVENTS","PointerEventInput","store","pointerEvents","MSPointerEvent","PointerEvent","removePointer","eventTypeNormalized","toLowerCase","isTouch","storeIndex","pointerId","splice","SINGLE_TOUCH_INPUT_MAP","touchstart","touchmove","touchend","touchcancel","SINGLE_TOUCH_TARGET_EVENTS","SINGLE_TOUCH_WINDOW_EVENTS","SingleTouchInput","started","touches","all","changed","changedTouches","concat","TOUCH_INPUT_MAP","TOUCH_TARGET_EVENTS","TouchInput","targetIds","allTouches","identifier","targetTouches","changedTargetTouches","filter","touch","DEDUP_TIMEOUT","DEDUP_DISTANCE","TouchMouseInput","mouse","primaryTouch","lastTouches","setLastTouch","eventData","lastTouch","lts","inputEvent","inputData","isMouse","sourceCapabilities","firesTouchEvents","t","dx","dy","PREFIXED_TOUCH_ACTION","style","NATIVE_TOUCH_ACTION","TOUCH_ACTION_AUTO","TOUCH_ACTION_MANIPULATION","TOUCH_ACTION_NONE","TOUCH_ACTION_PAN_X","TOUCH_ACTION_PAN_Y","TOUCH_ACTION_MAP","touchMap","cssSupports","CSS","supports","getTouchActionProps","TouchAction","value","set","compute","actions","update","touchAction","recognizers","recognizer","getTouchAction","hasPanX","hasPanY","cleanTouchActions","join","preventDefaults","prevented","preventDefault","hasNone","isTapPointer","isTapMovement","isTapTouchTime","preventSrc","STATE_POSSIBLE","STATE_BEGAN","STATE_CHANGED","STATE_ENDED","STATE_RECOGNIZED","STATE_CANCELLED","Recognizer","defaults","id","state","simultaneous","requireFail","stateStr","directionStr","getRecognizerByNameIfManager","otherRecognizer","get","AttrRecognizer","PanRecognizer","pX","pY","PinchRecognizer","PressRecognizer","_timer","_input","RotateRecognizer","SwipeRecognizer","TapRecognizer","pTime","pCenter","count","Hammer","preset","Manager","recognizeWith","dropRecognizeWith","requireFailure","dropRequireFailure","hasRequireFailures","canRecognizeWith","event","additionalEvent","tryEmit","canEmit","inputDataClone","reset","process","attrTest","optionPointers","isRecognized","isValid","threshold","directionTest","hasMoved","inOut","time","validPointers","validMovement","validTime","clearTimeout","taps","interval","posThreshold","validTouchTime","failTimeout","validInterval","validMultiTap","tapCount","VERSION","domEvents","inputClass","cssProps","userSelect","touchSelect","touchCallout","contentZooming","userDrag","tapHighlightColor","handlers","oldCssProps","toggleCssProps","item","add","stop","force","stopped","curRecognizer","existing","remove","on","events","off","data","gestureEvent","createEvent","initEvent","gesture","dispatchEvent","triggerDomEvent","STATE_FAILED","Tap","Pan","Swipe","Pinch","Rotate","Press","exports","__webpack_require__","module"],"mappings":"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","file":"main~30b5015c.f35eef767c778bab3271.js","sourcesContent":["/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function(window, document, exportName, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = document.createElement('div');\n\nvar TYPE_FUNCTION = 'function';\n\nvar round = Math.round;\nvar abs = Math.abs;\nvar now = Date.now;\n\n/**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */\nfunction setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n}\n\n/**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\nfunction invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n        each(arg, context[fn], context);\n        return true;\n    }\n    return false;\n}\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n        return;\n    }\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        i = 0;\n        while (i < obj.length) {\n            iterator.call(context, obj[i], i, obj);\n            i++;\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function() {\n        var e = new Error('get-stack-trace');\n        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n            .replace(/^\\s+at\\s+/gm, '')\n            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\n        var log = window.console && (window.console.warn || window.console.log);\n        if (log) {\n            log.call(window.console, deprecationMessage, stack);\n        }\n        return method.apply(this, arguments);\n    };\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\nif (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n        if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var output = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source !== undefined && source !== null) {\n                for (var nextKey in source) {\n                    if (source.hasOwnProperty(nextKey)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n        }\n        return output;\n    };\n} else {\n    assign = Object.assign;\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\nvar extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n    while (i < keys.length) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n        i++;\n    }\n    return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nvar merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n        assign(childP, properties);\n    }\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function boundFn() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n    return val;\n}\n\n/**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */\nfunction ifUndefined(val1, val2) {\n    return (val1 === undefined) ? val2 : val1;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        var i = 0;\n        while (i < src.length) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n        i++;\n    }\n\n    if (sort) {\n        if (!key) {\n            results = results.sort();\n        } else {\n            results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n    }\n\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    var i = 0;\n    while (i < VENDOR_PREFIXES.length) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n        i++;\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\n/**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return (doc.defaultView || doc.parentWindow || window);\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(manager.options.enable, [manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.init();\n\n}\n\nInput.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function() { },\n\n    /**\n     * bind the events\n     */\n    init: function() {\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function() {\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n        Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    // emit secret event\n    manager.emit('hammer.input', input);\n\n    manager.recognize(input);\n    manager.session.prevInput = input;\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\n    computeIntervalInputData(session, input);\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n}\n\nfunction computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n        prevDelta = session.prevDelta = {\n            x: prevInput.deltaX || 0,\n            y: prevInput.deltaY || 0\n        };\n\n        offset = session.offsetDelta = {\n            x: center.x,\n            y: center.y\n        };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity, velocityX, velocityY, direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n        var deltaX = input.deltaX - last.deltaX;\n        var deltaY = input.deltaY - last.deltaY;\n\n        var v = getVelocity(deltaTime, deltaX, deltaY);\n        velocityX = v.x;\n        velocityY = v.y;\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n        direction = getDirection(deltaX, deltaY);\n\n        session.lastInterval = input;\n    } else {\n        // use latest velocity info if it doesn't overtake a minimum period\n        velocity = last.velocity;\n        velocityX = last.velocityX;\n        velocityY = last.velocityY;\n        direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n    while (i < input.pointers.length) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n        i++;\n    }\n\n    return {\n        timeStamp: now(),\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0, i = 0;\n    while (i < pointersLength) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n        i++;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: x / deltaTime || 0,\n        y: y / deltaTime || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n/**\n * Mouse events input\n * @constructor\n * @extends Input\n */\nfunction MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down\n        if (!this.pressed) {\n            return;\n        }\n\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    }\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n\n/**\n * Pointer events input\n * @constructor\n * @extends Input\n */\nfunction PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n        // get index of the event in the store\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n            if (storeIndex < 0) {\n                store.push(ev);\n                storeIndex = store.length - 1;\n            }\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n\n    this.primaryTouch = null;\n    this.lastTouches = [];\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n            return;\n        }\n\n        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n        if (isTouch) {\n            recordTouches.call(this, inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n            return;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nfunction recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n        this.primaryTouch = eventData.changedPointers[0].identifier;\n        setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        setLastTouch.call(this, eventData);\n    }\n}\n\nfunction setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n        var lastTouch = {x: touch.clientX, y: touch.clientY};\n        this.lastTouches.push(lastTouch);\n        var lts = this.lastTouches;\n        var removeLastTouch = function() {\n            var i = lts.indexOf(lastTouch);\n            if (i > -1) {\n                lts.splice(i, 1);\n            }\n        };\n        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n}\n\nfunction isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n    for (var i = 0; i < this.lastTouches.length; i++) {\n        var t = this.lastTouches[i];\n        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var actions = [];\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n        if (hasNone) {\n            //do not prevent defaults if this is a tap gesture\n\n            var isTapPointer = input.pointers.length === 1;\n            var isTapMovement = input.distance < 2;\n            var isTapTouchTime = input.deltaTime < 250;\n\n            if (isTapPointer && isTapMovement && isTapTouchTime) {\n                return;\n            }\n        }\n\n        if (hasPanX && hasPanY) {\n            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n            return;\n        }\n\n        if (hasNone ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n    // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n    if (hasPanX && hasPanY) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    // pan-x OR pan-y\n    if (hasPanX || hasPanY) {\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    }\n\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\nfunction getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n        return false;\n    }\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\n        // If css.supports is not supported but there is native touch-action assume it supports\n        // all values. This is the case for IE 10 and 11.\n        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n}\n\n/**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n\n    this.id = uniqueId();\n\n    this.manager = null;\n\n    // default is enable true\n    this.options.enable = ifUndefined(this.options.enable, true);\n\n    this.state = STATE_POSSIBLE;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n        return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n            return this;\n        }\n\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n            return this;\n        }\n\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function() {\n        return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function(input) {\n        var self = this;\n        var state = this.state;\n\n        function emit(event) {\n            self.manager.emit(event, input);\n        }\n\n        // 'panstart' and 'panmove'\n        if (state < STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n\n        emit(self.options.event); // simple 'eventName' events\n\n        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n            emit(input.additionalEvent);\n        }\n\n        // panend and pancancel\n        if (state >= STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function(input) {\n        if (this.canEmit()) {\n            return this.emit(input);\n        }\n        // it's failing anyway\n        this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function() {\n        var i = 0;\n        while (i < this.requireFail.length) {\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = assign({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.tryEmit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return 'move';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n\n        if (direction) {\n            input.additionalEvent = this.options.event + direction;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            input.additionalEvent = this.options.event + inOut;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 251, // minimal time of the pointer to be pressed\n        threshold: 9 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.overallVelocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.overallVelocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.overallVelocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.offsetDirection &&\n            input.distance > this.options.threshold &&\n            input.maxPointers == this.options.pointers &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.offsetDirection);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n\n/**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        threshold: 9, // a minimal movement is ok, but keep it low\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTouchTime = input.deltaTime < options.time;\n\n        this.reset();\n\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n            return this.failTimeout();\n        }\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (validMovement && validTouchTime && validPointers) {\n            if (input.eventType != INPUT_END) {\n                return this.failTimeout();\n            }\n\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                // no failing requirements, immediately trigger the tap event\n                // or wait as long as the multitap interval to trigger\n                if (!this.hasRequireFailures()) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeoutContext(function() {\n                        this.state = STATE_RECOGNIZED;\n                        this.tryEmit();\n                    }, options.interval, this);\n                    return STATE_BEGAN;\n                }\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    failTimeout: function() {\n        this._timer = setTimeoutContext(function() {\n            this.state = STATE_FAILED;\n        }, this.options.interval, this);\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '2.0.7';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, {enable: false}],\n        [PinchRecognizer, {enable: false}, ['rotate']],\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(this.options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        recognizer = this.get(recognizer);\n\n        // let's make sure this recognizer exists\n        if (recognizer) {\n            var recognizers = this.recognizers;\n            var index = inArray(recognizers, recognizer);\n\n            if (index !== -1) {\n                recognizers.splice(index, 1);\n                this.touchAction.update();\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n        if (handler === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    if (!element.style) {\n        return;\n    }\n    var prop;\n    each(manager.options.cssProps, function(value, name) {\n        prop = prefixed(element.style, name);\n        if (add) {\n            manager.oldCssProps[prop] = element.style[prop];\n            element.style[prop] = value;\n        } else {\n            element.style[prop] = manager.oldCssProps[prop] || '';\n        }\n    });\n    if (!add) {\n        manager.oldCssProps = {};\n    }\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nassign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n});\n\n// this prevents errors when Hammer is loaded in the presence of an AMD\n//  style loader but by script tag, not by the loader.\nvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\nfreeGlobal.Hammer = Hammer;\n\nif (typeof define === 'function' && define.amd) {\n    define(function() {\n        return Hammer;\n    });\n} else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n} else {\n    window[exportName] = Hammer;\n}\n\n})(window, document, 'Hammer');\n"],"sourceRoot":""}